###Esse Playbook visa atualizar os pacotes do sistema operacional do cluster###
###Apenas os pacotes listados nas atualizações de segurança serão atualizados###
- hosts: k8s-poc
  become: yes
  serial: 1
  vars_prompt:
    - name: master #Especifica um node master para executar o drain
      prompt: Digite o hostname do servidor master
      private: no
  tasks:
    - name: Atualizando patches de segurança no done {{ inventory_hostname }}
      yum:
        name: '*'
        state: latest
        security: yes
        exclude: kube*

    - name: Verificando se é necessario o reboot do node {{ inventory_hostname }}
      command: needs-restarting -r
      register: result
      ignore_errors: yes

    - name: Mostrando o resultado
      debug:
        var: result.rc

    - name: Dain node {{ inventory_hostname }}
      command: kubectl drain {{ inventory_hostname }} --ignore-daemonsets --delete-emptydir-data
      delegate_to: "{{ master }}"
      when: result.rc == 1


#    - name: Dain node {{ inventory_hostname }}
#      kubernetes.core.k8s_drain:
#        state: drain
#        name: "{{ inventory_hostname }}"
#        delete_options:
#          terminate_grace_period: 300
#
    - name: Aguarda os pods ficarem disponiveis
      shell: kubectl get pods -n kube-system -o json
      register: kubectl_get_pods
      #Aguarda os pods ficarem com status Rinning no namespace Kubesystem
      until: kubectl_get_pods.stdout|from_json|json_query('items[*].status.phase')|unique == ["Running"]
      delegate_to: "{{ master }}"
      retries: 5
      delay: 10


    - name: Reiniciando o sistema
      reboot:
        test_command: uptime
      when: result.rc == 1
      register: shut


    - name: Pausando a task para aguardar o sistema reiniciar
      pause: seconds=30
      when: result.rc == 1

    - name: Aguardando o ssh ficar disponivel
      local_action: wait_for host={{ inventory_hostname }} port=22
        state=started delay=30 timeout=600
      retries: 30
      delay: 10
      when: result.rc == 127

    - name: Uncordon node {{ inventory_hostname }}
      command: kubectl uncordon {{ inventory_hostname }}
      delegate_to: "{{ master }}"
      when: result.rc == 1

      #Para usar o Modulo Kubernetes
      #ansible-galaxy collection install community.kubernetes
      #ansible-galaxy collection install cloud.common

#    - name: Uncordon node {{ inventory_hostname }}
#      kubernetes.core.k8s_drain:
#        state: uncordon
#       name: "{{ inventory_hostname }}"
